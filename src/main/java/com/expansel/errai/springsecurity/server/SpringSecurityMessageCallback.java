package com.expansel.errai.springsecurity.server;

import org.jboss.errai.bus.client.api.messaging.Message;
import org.jboss.errai.bus.client.api.messaging.MessageCallback;
import org.jboss.errai.security.shared.exception.UnauthenticatedException;
import org.jboss.errai.security.shared.exception.UnauthorizedException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.AuthenticationException;
/**
 * <p>Wraps a MessageCallback so that exceptions can be intercepted and mapped.</p>
 * 
 * <p>For example a Spring {@link AccessDeniedException} generated by a @Secured annotation
 * would be mapped to an Errai UnauthorizedException for the MessageBus.</p>
 *
 * @author Zach Visagie
 */
public class SpringSecurityMessageCallback implements MessageCallback {
    MessageCallback messageCallback;
    
    public SpringSecurityMessageCallback(MessageCallback messageCallback) {
        super();
        this.messageCallback = messageCallback;
    }

    @Override
    public void callback(Message message) {
        try {
            messageCallback.callback(message);
        } catch (RuntimeException e) {
            handleException(e);
        } 
    }

    protected void handleException(RuntimeException e) {
        // We handle the causes as well because RPC callbacks throw 
        // a MessageDeliveryException with an AccessDeniedException as 
        // cause when using spring method security which has the side 
        // effect of the following log statement: 
        // ERROR org.jboss.errai.bus.client.util.ErrorHelper  - *** Message delivery failure ***
        // FIXME Will need to look at Errai code and how we can improve this 
        // interop without duplication
        Throwable cause = e;
        RuntimeException toThrow;
        do {
            toThrow = mapException(cause);
            if(toThrow != null) {
                throw toThrow;
            }
        } while((cause = cause.getCause()) != null);
        throw e;
    }

    protected RuntimeException mapException(Throwable t) {
        if(t instanceof AuthenticationException) {
            return new UnauthenticatedException();
        } else if(t instanceof AccessDeniedException) {
            return new UnauthorizedException();
        }
        return null;
    }
}